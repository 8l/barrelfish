/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
 */

interface routing "Routing interface" {

	  /* from include/routing/routing.h */
          alias routeid uint32;
          alias recordid uint32;

	  /* variable sized messages */
          message send_bcast_msg(
                      routeid route_id, coremask mask, genvaddr link_id, 
 		      uint8 payload[size]);
          message send_bcast_with_ccast_msg(
                      routeid route_id, coremask mask, genvaddr link_id,
                      recordid ccast_record_id, uint8 payload[size]);
          message send_ccast_msg(
                      routeid route_id, recordid ccast_record_id,
                      uint8 payload[size]);
          message send_unicast_msg(
                      uint32 route_id, genvaddr link_id, coreid coreid, 
                      uint8 payload[size]);

	  /* fixed sized messages */
          message send_bcast_fixmsg(
                      routeid route_id, coremask mask, genvaddr link_id,  
                      uint64 payload_w1, uint64 payload_w2, 
		      uint8 size);
          message send_bcast_with_ccast_fixmsg(
                      routeid route_id, coremask mask, genvaddr link_id,
                      recordid ccast_record_id,  
                      uint64 payload_w1, uint64 payload_w2, 
		      uint8 size);
          message send_ccast_fixmsg(
                      routeid route_id, recordid ccast_record_id, 
                      uint64 payload_w1, uint64 payload_w2, 
		      uint8 size);
          message send_unicast_fixmsg(
                      uint32 route_id, genvaddr link_id, coreid coreid, 
                      uint64 payload_w1, uint64 payload_w2, 
		      uint8 size);

          message neighbor_connect_request(
                      routeid route_id, genvaddr neighborid, genvaddr lasthopid,
                      iref lasthop_iref, uint8 return_link, coreid init_core, 
		      coreid last_hop_core, coremask childcores);
          message neighbor_connect_response(
                      routeid routeid, genvaddr neighborid, genvaddr mylinkid,
                      genvaddr otherlinid, uint8 connected);
};
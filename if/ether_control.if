/*
 * Copyright (c) 2007, 2008, 2009, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
 */

interface ether_control "Generic Ethernet Driver Control flow Interface" {
    
    alias errval_t uint64;

    call register_filter_memory_request(cap mem);
    response register_filter_memory_response(errval_t err);

    call register_filter_request(uint64 id,
    		uint64 len_rx,
			uint64 len_tx,
			uint64 buffer_id_rx,
			uint64 buffer_id_tx);
    response register_filter_response(uint64 id,
    		errval_t err,
			uint64 filter_id,
			uint64 buffer_id_rx,
			uint64 buffer_id_tx);

    call deregister_filter_request(uint64 filter_id);
    response deregister_filter_response(errval_t err,
			uint64 filter_id);

    call register_arp_filter_request(uint64 id, 
    		uint64 len_rx,
			uint64 len_tx);
    response register_arp_filter_response(uint64 id, 
    		errval_t err);

/*
    call register_netd_memory(cap mem);
    response registered_netd_memory(errval_t err);

    call register_filter(uint64 id,
    		uint64 len_rx,
			uint64 len_tx,
			uint64 buffer_id_rx,
			uint64 buffer_id_tx);
    response registered_filter(uint64 id,
    		errval_t err,
			uint64 filter_id,
			uint64 buffer_id_rx,
			uint64 buffer_id_tx);

    call deregister_filter(uint64 filter_id,
			uint64 buffer_id_rx,
			uint64 buffer_id_tx);
    response deregistered_filter(errval_t err,
			uint64 filter_id,
			uint64 buffer_id_rx,
			uint64 buffer_id_tx);

    call register_arp_filter(uint64 id, 
    		uint64 len_rx,
			uint64 len_tx);
    response registered_arp_filter(uint64 id, 
    		errval_t err);
  */  
};

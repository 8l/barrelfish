/*
 * Copyright (c) 2007, 2008, 2009, 2010, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
 */

interface route "Routing interface" {

	  message init(uint8 id);
	  message poll_request(cap cap);
	  message poll_reply();

          message central_barrier_init_request(uint8 id);
          message central_barrier_init_reply();
          message central_barrier_request(int exp_iteration);
          message central_barrier_reply(int exp_iteration);

          message seq_bcast_init_request(uint8 id, uint64 time);
          message seq_bcast_init_reply();
          message seq_bcast_iter_request();
          message seq_bcast_iter_reply(uint64 time);
          message seq_bcast_request(int data);
          message seq_bcast_recv(int data);

          message tree_bcast_init_request(int radix, uint8 id, uint64 time);
          message tree_bcast_init_reply();
          message tree_bcast_iter_request();
          message tree_bcast_iter_reply(uint64 time);
          message tree_bcast_request(int data);
          message tree_bcast_recv(int data);

          message single_tree_bcast_init_request(int type, uint8 initiator);
          message single_tree_bcast_init_reply();
          message single_tree_bcast_iter_request();
          message single_tree_bcast_iter_reply(uint64 time);
          message single_tree_bcast_request(int data);
          message single_tree_bcast_recv(int data);

          message tree_barrier_init_request(int radix, uint8 id);
          message tree_barrier_init_reply();
          message tree_barrier_request(int exp_iteration);
          message tree_barrier_reply(int exp_iteration);

          message heap_barrier_init_request(uint8 id);
          message heap_barrier_init_reply();
          message heap_barrier_request(int exp_iteration);
          message heap_barrier_reply(int exp_iteration);

          message dist_barrier_init_request(uint8 id);
          message dist_barrier_init_reply();
	  message dist_barrier(int sense, int exp_iteration);

          message dist_barrier_entry_noti_init_request(uint8 id, uint64 delay);
          message dist_barrier_entry_noti_init_reply();
	  message dist_barrier_entry_noti(int sense, int exp_iteration);
};

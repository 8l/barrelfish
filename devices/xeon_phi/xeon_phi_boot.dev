/*
 * Copyright (c) 2014 ETH Zurich. All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
 */

/*
 * xeon_phi_boot.dev
 *
 * description: register definitions for the Xeon Phi Boot Time Registers
 */

device xeon_phi_boot lsbfirst ( addr sbox_base, addr dbox_base ) "Intel Xeon Phi Boot Registers" {

    /*
     * Protection Level: Ring 0
     * Visibility: Host / Coprocessor
     * Reset Dmain: CSR_RESET, HOT_RESET
     * Register Access: TRM
     */

     constants offset width(32) "" {
         address_shift=12;
         address_mask=0xfffff000;
     };

    /*
     * alias for scratch register 2
     */
    register download rw addr(sbox_base, 0xAB28) {
        status       1 "Download status bit";
        apicid       9 "APIC ID to send the boot interrupt";
        _            2 "unused";
        offset      20 "Load offset";         
    };
    
    /*
     * alias for scratch register 3
     */
    register res_size rw addr(sbox_base, 0xAB2C) {
        os 32 "Reserved size";
    };
    
    /*
     * alias for scratch register 5
     */
    register os_size rw addr(sbox_base, 0xAB34) {
        size 32 "Size of the loaded image";
    };
    
    constants mem width(2) "" {
          mem_all    = 0x0;
          mem_half   = 0x1;
          mem_third  = 0x2;
          mem_fourth = 0x3;
    };
    
    register meminfo rw addr(sbox_base, 0xAB20) {
          test_disable  1 "Memtest disable";
          usage         2 "Memory usage";
          size_kb      29 "Memory size in KB";
    };
    
    register reset rw addr(sbox_base, 0x4010) {
    	reset  1 "Perform device rest";
    	_     31; 
    };
    /*
    constants postcodes "" {
    	postcode_invalid = 0x0 "Invalid Postcode";
		postcode_lidt = 0x01 "LIDT";
		postcode_sboxinit = 0x02 "SBOX initialization";
		postcode_gddrtop = 0x03 "Set GDDR Top";
		postcode_memtest = 0x04 "Begin memory test";
		postcode_e820 = 0x05 "Program E820 table";
		postcode_dbox = 0x06 "Initialize DBOX";
		postcode_cache = 0x09 "Enable Cache";    
		postcode_initap = 0x0b "Pass initialization params to APs";
		postcode_code = 0x0c "Cache C code";
		postcode_mp = 0x0d "Program MP table";
		postcode_apwkup = 0x0f "Wake up APs";
		postcode_apboot = 0x10 "Wait for APs to boot";
		postcode_sig = 0x11 "Signal host to download OS";
		postcode_ready = 0x12 "Wait for download READY";
		postcode_boot = 0x13 "Signal to boot received";
		postcode_pinfo = 0x15 "Report platform information";
		postcode_ptable = 0x17 "Page table setup";
		postcode_memtrain = 0x30 ""Begin memory training;
		postcode_gddrtrain = 0x31 ""GDDR Training to query memory modules;
		postcode_findgddrtrain = 0x32 "Find GDDR training parameters in flash";
		postcode_mmiotrain = 0x33 "MMIO training";
		postcode_rcomptrain = 0x34 "RCOMP training";
		postcode_dcctrain = 0x35 "DCC disable training";
		postcode_hcktrain = 0x36 "HCK training";
		postcode_ucodetrain = 0x37 "UCode Training";
		postcode_vendortrain = 0x38 "Vendor specific training";
		postcode_addrtrain = 0x39 "GDDR address training";
		postcode_gddrident = 0x3A "GDDR memory module identification";
		postcode_wcktrain = 0x3B "GDDR WCK training";
		postcode_cdrdtrain = 0x3C "GDDR read training with CDR enabled";
		postcode_cdretrain = 0x3D "GDDR Read Training with CDR disabled";
		postcode_wrtrain = 0x3E "GDDR Write Training";
		postcode_fintrain = 0x3F "Finalize GDDR Training";
		postcode_osauth = 0x40 "Begin Coprocessor OS authentification";
		postcode_loading0 = 0x50 "Coprocessor OS Loading 0";
		postcode_loading1 = 0x51 "Coprocessor OS Loading 1";
		postcode_loading2 = 0x52 "Coprocessor OS Loading 2";
		postcode_loading3 = 0x53 "Coprocessor OS Loading 3";
		postcode_loading4 = 0x54 "Coprocessor OS Loading 4";
		postcode_loading5 = 0x55 "Coprocessor OS Loading 5";
		postcode_loading6 = 0x56 "Coprocessor OS Loading 6";
		postcode_loading7 = 0x57 "Coprocessor OS Loading 7";
		postcode_loading8 = 0x58 "Coprocessor OS Loading 8";
		postcode_loading9 = 0x59 "Coprocessor OS Loading 9";
		postcode_loadingb = 0x5A "Coprocessor OS Loading A";
		postcode_loadinga = 0x5B "Coprocessor OS Loading B";
		postcode_loadingc = 0x5C "Coprocessor OS Loading C";
		postcode_loadingd = 0x5D "Coprocessor OS Loading D";
		postcode_loadinge = 0x5E "Coprocessor OS Loading E";
		postcode_loadingf = 0x5F "Coprocessor OS Loading F";
		postcode_gp = 0x6P "Int 13 - General Protection Fault";
		postcode_invaltss = 0x75 "Int 10 - Invalid TSS";
		postcode_fpu = 0x87 "Int 16 - x87 FPU Error";
		postcode_algin = 0xac "";
		postcode_bp = 0x "";
		postcode_bound = 0x "";
		postcode_mc = 0x "";
		postcode_seg = 0x "";
		postcode_dbg = 0x "";
		postcode_div = 0x "";
		postcode_df = 0x "";
		postcode_memf = 0x "";
		postcode_ = 0x "";
		postcode_ = 0x "";
		postcode_ = 0x "";
		postcode_ = 0x "";
		
		postcode_ = 0x "";








    	postcode_invalid         = 0; 
   		postcode_reset_failed_f2 = 12870;
		postcode_reset_failed_f4 = 13382;
    	postcode_fatal		     = 0xffffffff;
    };
    */
    
    register postcode rw addr(dbox_base, 0x242c) {
    	code0  8;
    	code1  8;
    	_     16;
    };

};


#!/home/netos/tools/i686-pc-linux-gnu/bin/x86_64-pc-linux-gdb -x

##########################################################################
# Copyright (c) 2007, 2008, 2009, ETH Zurich.
# All rights reserved.
#
# This file is distributed under the terms in the attached LICENSE file.
# If you do not find this file, copies can be found by writing to:
# ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
##########################################################################

# This script flips in the debugger.

# Set debug target object file (containing debug symbols)
file %KERNEL

# Need to discard symbols first, else GDB chokes on relocations
symbol-file

# Get symbols and relocate accordingly
add-symbol-file %KERNEL 0xffffffffc0100000

# Connect to QEMU instance...
define debug_qemu
  target remote localhost:1234
end

# Command to debug a kernel on hardware connected through conserver
# $arg0 is the name of the relevant console
define debug_hw
  target remote | console -f $arg0
  debug_copy 1 # assume we're debugging CPU 0, but user can change it if needed
end

# Command to debug kernel at an arbitrary location. $arg0 specifies number of
# kernel copy. $arg1 specifies constant kernel relocation addend (i.e. when
# debugging a kernel that has been relocated to top of memory).
define debug_kernel_at
  set $rodata_offset = %rodata - 0x100000
  set $data_offset = %data - 0x100000
  set $data_rel_offset = %data_rel - 0x100000
  set $data_rel_local_offset = %data_rel_local - 0x100000
  set $bss_offset = %bss - 0x100000

  set $text_addr = $arg0 * %multiplier + $arg1
  set $rodata_addr = $arg0 * %multiplier + $arg1 + $rodata_offset
  set $data_addr = $arg0 * %multiplier + $arg1 + $data_offset
  set $data_rel_addr = $arg0 * %multiplier + $arg1 + $data_rel_offset
  set $data_rel_local_addr = $arg0 * %multiplier + $arg1 + $data_rel_local_offset
  set $bss_addr = $arg0 * %multiplier + $arg1 + $bss_offset

  symbol-file
  add-symbol-file %KERNEL $text_addr -s .rodata $rodata_addr -s .data $data_addr -s .data.rel $data_rel_addr -s .data.rel.local $data_rel_local_addr -s .bss $bss_addr
end

# Add command to be able to debug a specific copy of the kernel.
# $arg0 specifies the number of the copy, starting from 1.
# Kernel #1 is the pristine bootstrap kernel. Kernel #2 is the first
# duty copy for the very first CPU and so on.
#
# XXX: There is a page in front of every kernel. Adding that to relocation.
define debug_copy
  set $reloc_addend = 0xffffffffc0000000 + 0x1000
  debug_kernel_at $arg0 $reloc_addend
end

# Add command to be able to switch to boot initialization code of a
# specific copy of the kernel. $arg0 specifies the number of the copy,
# starting from 1.
#
# XXX: There is a page in front of every kernel. Adding that to relocation.
define debug_boot
  debug_kernel_at $arg0 0x1000
end

# Add command to switch to original (pristine) kernel code executed at
# early bootup (until local_init() is called).
define debug_original
  debug_kernel_at 0 0x100000
end
